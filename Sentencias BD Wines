--3. Ejecutar una sentencia que muestre todos los campos de una tabla
SELECT *
  FROM vino;
  
--4. Ejecutar una sentencia que muestre 2 campos de otra tabla.
SELECT fecha, cantidad
  FROM pedido;

--5. Ejecutar una sentencia que pueda multiplicar 2 campos de una tabla del modelo.
SELECT precio_unit, cantidad, precio_unit*cantidad total_compra
  FROM pedido;

--6. Siguiendo con el punto 5 que calcule, además, un 35% del precio unitario.
SELECT precio_unit, cantidad, precio_unit*cantidad total_compra, precio_unit*0.35 "35%"
  FROM pedido;

--7. Ejecutar una sentencia que ponga “alias” en los campos.
SELECT codigo_vino 'Código del Vino', codigo_corr 'Cliente satisfecho'
  FROM pedido;

--8. Ejecutar una sentencia que concatene el valor de 2 campos de cualquier tabla.
SELECT codigo_vino ||' - '|| descripcion AS 'Datos de los vinos'
 FROM vino; 

--9. Que cláusula usarías para eliminar los duplicados de valores que haya en un campo.
SELECT DISTINCT codigo_cliente cliente 
  FROM pedido;

--10. Ejecuta una sentencia que filtre información por un campo que sea numérico.
SELECT codigo_cliente, MAX(cantidad), MIN(cantidad)
  FROM pedido
  GROUP BY codigo_corr;

--11. Ejecuta una sentencia que filtre información por un campo que sea carácter.
SELECT INITCAP(descripcion) ||' ('|| anio_elaboracion ||')'
  FROM vino;

--12. Ejecuta una sentencia que utilice el operador BETWEEN.
SELECT descripcion, anio_elaboracion 
  FROM vino 
  WHERE anio_elaboracion BETWEEN 1990 AND 2000
  ORDER BY anio_elaboracion;

--13. Ejecuta una sentencia que utilice el operador IN ...
SELECT *
  FROM pedido
  WHERE codigo_vino IN ('AS', 'MM');

--... y NOT IN.
SELECT *
  FROM pedido
  WHERE pedido.cantidad > 110 AND codigo_vino NOT IN('AS', 'MM');

--14. Ejecuta una sentencia que utilice el operador LIKE que utilice el carácter ‘%’.
SELECT descripcion
  FROM vino 
  WHERE UPPER(descripcion) LIKE '%MALBEC%';

--15. Ejecuta una sentencia que utilice el operador IS NULL / IS NOT NULL.


--16. Ejecuta una sentencia que utilice la cláusula ORDER BY, ascendente, y otra descendente.

--17. Ejecutar una sentencia que solicite un valor por pantalla.

--18. Ejecutar una sentencia que utiliza la función NVL.

--19. Ejecutar una sentencia que utiliza la función NVL2.

--20. Ejecutar una sentencia que utiliza la función NULLIF.

--21. Ejecutar una sentencia que utiliza la función COALESCE.22. Ejecutar una sentencia que utiliza la función CASE.

--23. Ejecutar una sentencia que utiliza la función DECODE.

--24. Ejecutar una sentencia que utiliza la función de Fila LOWER.

--25. Ejecutar una sentencia que utiliza la función de Fila UPPER.

--26. Ejecutar una sentencia que utiliza la función de Fila INITCAP.

--27. Ejecutar una sentencia que utiliza la función de Fila CONCAT.

--28. Ejecutar una sentencia que utiliza la función de Fila SUBSTR.

--29. Ejecutar una sentencia que utiliza la función de Fila LENGTH.

--30. Ejecutar una sentencia que utiliza la función de Fila INSTR.

--31. Ejecutar una sentencia que utiliza la función de Fila LPAD.

--32. Ejecutar una sentencia que utiliza la función de Fila TRIM, LTRIM y RTRIM.

--33. Ejecutar una sentencia que utiliza la función de Fila REPLACE.

--34. Ejecutar una sentencia que utiliza la función de Fila ROUND.

--35. Ejecutar una sentencia que utiliza la función de Fila TRUNC.

--36. Ejecutar una sentencia que utiliza la función de Fila MOD.

--37. Ejecutar una sentencia que utiliza la función de Fecha MONTHS_BETWEEN.

--38. Ejecutar una sentencia que utiliza la función de Fecha ADD_MONTHS.

--39. Ejecutar una sentencia que utiliza la función de Fecha NEXT_DAY y LAST_DAY.

--40. Ejecutar una sentencia que utiliza la función TO_DATE.

--41. Ejecutar una sentencia que utiliza la función TO_CHAR.42. Ejecutar una sentencia que utiliza la función TO_NUMBER.

--43. Ejecutar una sentencia que utilice la función de grupo SUM.

--44. Ejecutar una sentencia que utiliza la función de grupo AVG.

--45. Ejecutar una sentencia que utiliza la función de grupo MIN y MAX.

--46. Ejecutar una sentencia que utiliza la función de grupo COUNT.

--47. Ejecutar una sentencia que utiliza la función de grupo COUNT combinado con DISTINCT.

--48. Ejecutar una sentencia que utiliza la cláusula HAVING.

--49. Ejecutar una sentencia que haga un JOIN.

--50. Ejecutar una sentencia que haga un LEFT OUTER JOIN.

--51. Ejecutar una sentencia que haga un RIGHT OUTER JOIN.

--52. Ejecutar una sentencia de INSERT.

--53. Ejecutar una sentencia de DELETE.

--54. Ejecutar una sentencia de UPDATE.

CREATE TABLE categoria (
     codigo_categ VARCHAR2(10) NOT NULL
    , descripcion VARCHAR2(100) NOT NULL
    , CONSTRAINT COD_CAT_ID_PK PRIMARY KEY (codigo_categ)
);

CREATE TABLE bodega (
     codigo_bodega VARCHAR2(10) NOT NULL
    , descripcion VARCHAR2(100) NOT NULL
    , CONSTRAINT COD_BOD_ID_PK PRIMARY KEY (codigo_bodega)
);

CREATE TABLE vino (
     codigo_vino VARCHAR2(10) NOT NULL
    , descripcion VARCHAR2(100) NOT NULL
    , anio_elaboracion NUMBER NOT NULL
    , categoria VARCHAR2(10) NOT NULL
    , bodega VARCHAR2(10) NOT NULL
    , FOREIGN KEY(bodega) REFERENCES bodega (codigo_bodega)
    , FOREIGN KEY(categoria) REFERENCES categoria (codigo_categ)
    , CONSTRAINT COD_VINO_ID_PK PRIMARY KEY (codigo_vino)
);

CREATE TABLE cliente (
     codigo_cliente VARCHAR2(10) NOT NULL 
    , nom_razon VARCHAR2(50) NOT NULL 
    , telefono VARCHAR2(15) NOT NULL 
    , email VARCHAR2(25) NOT NULL 
    , tarjeta VARCHAR2(25) NOT NULL 
    , CONSTRAINT COD_CORR_ID_PK PRIMARY KEY (codigo_cliente)
);

CREATE TABLE pedido(
    codigo_vino VARCHAR2(10) NOT NULL, 
	codigo_cliente VARCHAR2(15) NOT NULL, 
	fecha DATE NOT NULL, 
	cantidad NUMBER(10,0) NOT NULL, 
	precio_unit NUMBER(10,0) NOT NULL,
    FOREIGN KEY(codigo_vino) REFERENCES vino(codigo_vino),
    FOREIGN KEY(codigo_cliente) REFERENCES cliente(codigo_cliente),
    CONSTRAINT COD_PEDIDO_ID_PK PRIMARY KEY (codigo_vino, codigo_cliente)
   );


CREATE TABLE compra (
      codigo_proveedor VARCHAR2(15) NOT NULL  
    , codigo_vino VARCHAR2(10) NOT NULL
    , fecha DATE NOT NULL
    , cantidad NUMBER(10) NOT NULL  
    , FOREIGN KEY(codigo_vino) REFERENCES vino(codigo_vino)
    , FOREIGN KEY(codigo_proveedor) REFERENCES proveedor(codigo_prov)
    , CONSTRAINT COD_COMPRA_ID_PK PRIMARY KEY (codigo_vino, codigo_proveedor)
);

CREATE TABLE proveedor (
    codigo_prov VARCHAR2(2) NOT NULL 
    , razon_social VARCHAR2(20) NOT NULL
    , calidad_proveedor VARCHAR2(2) NOT NULL
    , FOREIGN KEY(calidad_proveedor) REFERENCES categoria_proveedor(codigo_cate_prov)
    , CONSTRAINT COD_PROV_ID_PK PRIMARY KEY (codigo_prov)
);


CREATE TABLE categoria_proveedor (
    codigo_cate_prov VARCHAR2(2) NOT NULL CHECK (codigo_cate_prov IN ('AC', 'BA')),
    calidad VARCHAR2(20) NOT NULL,
    cantidad NUMBER(20) NOT NULL,
    facturacion NUMBER(20) NULL,
    ventas NUMBER(20) NULL,
    CONSTRAINT COD_CATE_PROV_PK PRIMARY KEY (codigo_cate_prov)
);

INSERT INTO CATEGORIA VALUES ('TIN','TINTOS');
INSERT INTO CATEGORIA VALUES ('BLA','BLANCOS');
INSERT INTO CATEGORIA VALUES ('ROS','ROSADOS');
INSERT INTO CATEGORIA VALUES ('ESP','ESPUMANTES');

INSERT INTO BODEGA VALUES ('AL','ALAMOS');
INSERT INTO BODEGA VALUES ('AF','ACHAVAL FERRER');
INSERT INTO BODEGA VALUES ('BA','BODEGA AMALAYA');
INSERT INTO BODEGA VALUES ('BR','BODEGA ARGENTO');

INSERT INTO VINO VALUES ('LM','LINDAFLOR MALBEC', 2000, 'TIN', 'AL');
INSERT INTO VINO VALUES ('MM','MARTIN BRUNO MALBEC', 1998, 'TIN', 'AF');
INSERT INTO VINO VALUES ('VB','VIA BLANCA MALBEC', 1996, 'TIN', 'BA');
INSERT INTO VINO VALUES ('GL','GRETA LA SALVAJE SEMILLON', 1998, 'BLA', 'BA');
INSERT INTO VINO VALUES ('TR','TRUMPETER RESERVE DOUX', 1996, 'BLA', 'BA');
INSERT INTO VINO VALUES ('AV','ALTA VISTA SAUVIGNON', 1995, 'BLA', 'AF');
INSERT INTO VINO VALUES ('AS','AMANSADO CLASSIC ROSE', 2002, 'BLA', 'AF');
INSERT INTO VINO VALUES ('ZT','ZORZAL TERROIR', 2004, 'BLA', 'AF');
INSERT INTO VINO VALUES ('PF','PINK FLOOD DE JUANCHI', 2006, 'BLA', 'AF');

INSERT INTO CLIENTE VALUES (1, 'MARINAO GECIK', '15-4-567-8976', 'MGECIK@GMAIL.COM', '3456-5678-3245-7654');
INSERT INTO CLIENTE VALUES (2, 'RICARDO PEREZ', '15-4-356-8900', 'RPEREZ@GMAIL.COM', '1234-5678-6789-2345');
INSERT INTO CLIENTE VALUES (3, 'SUSANA VAINSHTEIN', '15-4-765-1234', 'SVAINSHTEIN@GMAIL.COM', '9876-5092-3456-1342');
INSERT INTO CLIENTE VALUES (4, 'PABLO PATRIZI', '15-4-894-1334', 'PPATRIZI@GMAIL.COM', '9986-5077-3896-1652');	
					   
INSERT INTO PEDIDO VALUES( 'LM', '1',  TO_DATE('21/06/2018','DD/MM/YYYY'), 100, 150);
INSERT INTO PEDIDO VALUES( 'MM', '1',  TO_DATE('21/06/2018','DD/MM/YYYY'), 100, 200);
INSERT INTO PEDIDO VALUES( 'AV', '2',  TO_DATE('21/05/2018','DD/MM/YYYY'), 130, 250);
INSERT INTO PEDIDO VALUES( 'AS', '2',  TO_DATE('21/05/2018','DD/MM/YYYY'), 120, 300);
INSERT INTO PEDIDO VALUES( 'GL', '3',  TO_DATE('21/03/2019','DD/MM/YYYY'), 140, 100);
INSERT INTO PEDIDO VALUES( 'TR', '3',  TO_DATE('21/03/2019','DD/MM/YYYY'), 120, 120);

INSERT INTO CATEGORIA_PROVEEDOR VALUES ( 'AC', 'ALTA CALIDAD', 100, 1000000,  30000);
INSERT INTO CATEGORIA_PROVEEDOR VALUES ( 'BA', 'BAJA CALIDAD', 200,0,0);
                       				 
INSERT INTO PROVEEDOR VALUES ( 'LR', 'LA RURAL', 'AC');
INSERT INTO PROVEEDOR VALUES ( 'CO', 'COYANCO', 'AC');
INSERT INTO PROVEEDOR VALUES ( 'MO', 'MONETVIEJO', 'BA');
INSERT INTO PROVEEDOR VALUES ( 'RO', 'ROLLAND', 'BA');

INSERT INTO COMPRA VALUES( 'LR', 'LM', TO_DATE('21/06/2017','DD/MM/YYYY'), 2000);
INSERT INTO COMPRA VALUES( 'LR', 'MM', TO_DATE('21/06/2017','DD/MM/YYYY'), 2000);
INSERT INTO COMPRA VALUES( 'MO', 'GL', TO_DATE('21/09/2017','DD/MM/YYYY'), 1500);
INSERT INTO COMPRA VALUES( 'MO', 'TR', TO_DATE('21/09/2017','DD/MM/YYYY'), 1500);
INSERT INTO COMPRA VALUES( 'RO', 'GL', TO_DATE('21/05/2017','DD/MM/YYYY'), 1000);
INSERT INTO COMPRA VALUES( 'RO', 'TR', TO_DATE('21/05/2017','DD/MM/YYYY'),  800);


